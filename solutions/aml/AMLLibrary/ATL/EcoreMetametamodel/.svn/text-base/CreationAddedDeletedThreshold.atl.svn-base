-- @atlcompiler atl2006
--/*******************************************************************************
-- * Copyright (c) 2009 Ecole des Mines de Nantes.

-- * All rights reserved. This program and the accompanying materials
-- * are made available under the terms of the Eclipse Public License v1.0
-- * which accompanies this distribution, and is available at
-- * http://www.eclipse.org/legal/epl-v10.html
-- *
-- * Contributors:
-- *    Kelly Garces - initial implementation and/or initial documentation
-- *******************************************************************************/ 

module CreationAddedDeleted; -- Module Template
create OUT : EqualMM from IN : EqualMM, m1 : Metametamodel, m1 : Metametamodel;

--uses MatchLibrary;

helper def: methodName : String = 'Creation Added Deleted';

--helper context Metametamodel!EModelElement def: matches(other : Metametamodel!EModelElement) : Boolean =
--	let left : String = self.name.toLower() in
--	let right : String = other.name.toLower() in
--	left = right;
	
--helper context Metametamodel!EModelElement def: similarityName(right : Metametamodel!EModelElement) : Real = 	
--	if self.matches(right) then
--		thisModule.similarityValue
--	else
--		self.name.getStringSim(right.name)	 		
--	endif;

abstract rule EqualByName {
	from
		d : EqualMM!Deleted, a : EqualMM!Added 
		(
				d.name.simStrings(a.name) > 0.5
		)
	to
		s : EqualMM!Equal (
			name <- d.name + '_' + a.name,
			right <- thisModule.leftElement(a.right),
			left <- thisModule.rightElement(d.left),
			model <- d.model,
			similarity <- d.name.simStrings(a.name)
			)
--			,
--		right : EqualMM!RightElement (
--				name <- a.right.name,
--				element <- a.right.element--,
--				--model <- a.model, 
--				--link <- s
--			),
--		left : EqualMM!LeftElement (				
--				name <- d.left.name,
--				element <- d.left.element--,
--				--model <- d.model,
--				--link <- s
--			)
}

abstract rule EqualStructuralFeatureByName extends EqualByName {
	from
		d : EqualMM!DeletedStructuralFeature, a : EqualMM!AddedStructuralFeature 
	to
		s : EqualMM!EqualStructuralFeature		
}

rule EqualAttributeByName extends EqualStructuralFeatureByName {
	from
		d : EqualMM!DeletedAttribute, a : EqualMM!AddedAttribute 
	to
		s : EqualMM!EqualAttribute		
}

rule EqualReferenceByName extends EqualStructuralFeatureByName {
	from
		d : EqualMM!DeletedReference, a : EqualMM!AddedReference 
	to
		s : EqualMM!EqualReference		
}

rule EqualClassByName extends EqualByName {
	from
		d : EqualMM!DeletedClass, a : EqualMM!AddedClass
	to
		s : EqualMM!EqualClass
}

rule EqualEnumeration extends EqualByName {
	from
		d : EqualMM!DeletedEnumeration, a : EqualMM!AddedEnumeration
	to
		s : EqualMM!EqualEnumeration
	
}

rule EqualEnumLiteral extends EqualByName {
	from
		d : EqualMM!DeletedEnumLiteral, a : EqualMM!AddedEnumLiteral
	to
		s : EqualMM!EqualEnumLiteral
	
}

rule EqualDataType extends EqualByName {
	 
	from
		d : EqualMM!DeletedDataType, a : EqualMM!AddedDataType
	to
		s : EqualMM!EqualDataType
	
}


-- Copied rules
--abstract rule Link {
--	from
--		l : EqualMM!WLink
--	to
--		alink : EqualMM!WLink(
--			name <- l.name,
--			model <- l.model,
--			left <- l.left,
--			right <- l.right,
--			child <- l.child
--		)
--		,
--		right : EqualMM!RightElement (
--				name <- l.right.name,
--				element <- l.right.element--,
--				--model <- a.model, 
--				--link <- s
--			),
--		left : EqualMM!LeftElement (				
--				name <- l.left.name,
--				element <- l.left.element--,
--				--model <- d.model,
--				--link <- s
--			)
--}

--abstract rule Equal extends Link {
--	from 
--		l : EqualMM!Equal
--	to
--		alink : EqualMM!Equal(
--			similarity <- l.similarity	
--		)
--}
--
--rule EqualClass extends Equal {
--	from
--		l : EqualMM!EqualClass
--	to
--		alink : EqualMM!EqualClass
--}
--
--rule EqualStructuralFeature extends Equal {
--	from
--		l : EqualMM!EqualStructuralFeature
--	to
--		alink : EqualMM!EqualStructuralFeature
--}
--
--rule EqualPackage extends Equal {
--	from
--		l : EqualMM!EqualPackage
--	to
--		alink : EqualMM!EqualPackage
--}
--
--rule EqualEnumeration extends Equal {
--	from
--		l : EqualMM!EqualEnumeration
--	to
--		alink : EqualMM!EqualEnumeration
--}
--
--rule EqualEnumLiteral extends Equal {
--	from
--		l : EqualMM!EnumLiteral
--	to
--		alink : EqualMM!EnumLiteral
--}
--
--abstract rule Added extends Link {
--	from
--		l : EqualMM!Added
--	to	
--		alink : EqualMM!Added
--}
--
--rule AddedClass extends Added {
--	from
--		l : EqualMM!AddedClass
--	to
--		alink : EqualMM!AddedClass	
--}
--
--rule AddedStructuralFeature extends Added {
--	from
--		l : EqualMM!AddedStructuralFeature
--	to
--		alink : EqualMM!AddedStructuralFeature
--}
--
--rule AddedRestricted extends AddedStructuralFeature {
--	from
--		l : EqualMM!AddedRestricted
--	to
--		alink : EqualMM!AddedRestricted(
--			restrictedValue <- l.restrictedValue
--		)
--}
--
--rule AddedDefaultValue extends AddedRestricted {
--	from
--		l : EqualMM!AddedDefaultValue
--	to
--		alink : EqualMM!AddedDefaultValue
--}
--
--rule AddedRestrictedMultiplicity extends AddedRestricted {
--	from
--		l : EqualMM!AddedRestrictedMultiplicity
--	to
--		alink : EqualMM!AddedRestrictedMultiplicity
--}
--
--abstract rule Deleted extends Link {
--	from
--		l : EqualMM!Deleted 
--	to
--		alink : EqualMM!Deleted
--}
--
--rule DeletedClass extends Deleted {
--	from 
--		l : EqualMM!DeletedClass
--	to
--		alink : EqualMM!DeletedClass
--}
--
--rule DeletedStructuralFeature extends Deleted {
--	from
--		l : EqualMM!DeletedStructuralFeature
--	to
--		alink : EqualMM!DeletedStructuralFeature
--}

--rule NotRefPropertyModified extends Link {
--	from
--		l : EqualMM!NotRefPropertyModified
--	to
--		alink : EqualMM!NotRefPropertyModified(
--			oldValue <- l.oldValue,
--			newValue <- l.newValue
--		) 
--}
--
--rule UpperModified extends NotRefPropertyModified {
--	from
--		l : EqualMM!UpperModified
--	to
--		alink : EqualMM!UpperModified
--}
--
--rule LowerModified extends NotRefPropertyModified {
--	from
--		l : EqualMM!LowerModified
--	to
--		alink : EqualMM!LowerModified
--}
--
--rule IsAbtractModified extends NotRefPropertyModified {
--	from
--		l : EqualMM!IsAbtractModified
--	to
--		alink : EqualMM!IsAbtractModified
--}
--
--rule NameModified extends NotRefPropertyModified {
--	from
--		l : EqualMM!NameModified
--	to
--		alink : EqualMM!NameModified
--}
--
--rule DefaultValueModified extends NotRefPropertyModified {
--	from
--		l : EqualMM!NameModified
--	to
--		alink : EqualMM!NameModified
--}
--
--rule IsContainerModified extends NotRefPropertyModified {
--	from
--		l : EqualMM!IsContainerModified
--	to
--		alink : EqualMM!IsContainerModified
--}
--
--rule TypeModified extends Link {
--	from
--		l : EqualMM!TypeModified
--	to
--		alink:EqualMM!TypeModified
--}
--
--rule OppositeModified extends Link {
--	from
--		l : EqualMM!OppositeModified
--	to
--		alink:EqualMM!OppositeModified
--}
--
--rule AddedSupertypeModified extends Link {
--	from
--		l : EqualMM!AddedSupertypeModified
--	to
--		alink:EqualMM!AddedSupertypeModified
--}
--
--rule DeletedSupertypeModified extends Link {
--	from
--		l : EqualMM!DeletedSupertypeModified
--	to
--		alink:EqualMM!DeletedSupertypeModified
--}

lazy rule leftElement {
	from
		mmw : EqualMM!LeftElement
	to
		out : EqualMM!LeftElement (
			name <- mmw.name,
			element <- mmw.element
		)
}

lazy rule rightElement {
	from
		mmw : EqualMM!RightElement
	to
		out : EqualMM!RightElement (
			name <- mmw.name,
			element <- mmw.element
		)
}

rule ElementRefs {
	from
		mmw : EqualMM!ElementRef 		
	to
		out : EqualMM!ElementRef (
			name <- mmw.name,
			ref <- mmw.ref,
			modelRef <- mmw.modelRef			
		)
}

rule matchmodel {
	from
		mmw: EqualMM!MatchModel 
	to
		model : EqualMM!MatchModel (
			name <- mmw.name,
			leftM <- mmw.leftM,
			rightM <- mmw.rightM,
			methods <- mmw.methods->union(Sequence{method})
		),
		method : EqualMM!Method (
			name <- thisModule.methodName
		)
}

rule method {
	from
		mmw : EqualMM!Method
	to 
		method : EqualMM!Method (
			name <- mmw.name			
		)
}

rule modelref {
	from
		mmw : EqualMM!ModelRef
	to
		out : EqualMM!ModelRef (
			name <- mmw.name,
			ref <- mmw.ref
		)
}