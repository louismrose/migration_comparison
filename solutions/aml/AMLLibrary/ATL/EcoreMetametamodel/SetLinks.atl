-- @atlcompiler atl2006
module SetLinks;
create OUT : EqualMM from IN1 : EqualMM, m1 : Metametamodel, m2 : Metametamodel, m1model : m1, m2model : m2;

uses EqualMM;

helper def: equalset (lclass:OclAny, rclass:OclAny, lSF:OclAny, rSF:OclAny) : Boolean =
	let ls : OclAny = thisModule.mapLeftSet.get(lclass.key(lSF)) in
	let rs : OclAny = thisModule.mapRightSet.get(rclass.key(rSF)) in
	 ls.intersection(rs).includesAll(ls) and
	 rs.intersection(ls).includesAll(rs);

helper def: superset(lclass:OclAny, rclass:OclAny, lSF:OclAny, rSF:OclAny) : Boolean =
	let ls : OclAny = thisModule.mapLeftSet.get(lclass.key(lSF)) in
	let rs : OclAny = thisModule.mapRightSet.get(rclass.key(rSF)) in
	ls.includesAll(rs);

	
helper def: subset(lclass:OclAny, rclass:OclAny, lSF:OclAny, rSF:OclAny) : Boolean =
	let ls : OclAny = thisModule.mapLeftSet.get(lclass.key(lSF)) in
	let rs : OclAny = thisModule.mapRightSet.get(rclass.key(rSF)) in
	rs.includesAll(ls);
	
helper def : matchingSets (contains : OclAny, contained : OclAny) : OclAny =
	contains->iterate(s; acc : OclAny = Sequence{} | --TODO verify what it is necessary a sequence or a set
		acc->union(
			contained->iterate(ed; acc1 : OclAny = Sequence{} |
				if (s.indexOf(ed) > -1) and ed.length() > 1 then
					acc1.including(ed)
				else
					acc1
				endif
			)
		)
	);
	
helper def : fullOverlaping (contains : OclAny, contained : OclAny) : Boolean =
	contains.size() = thisModule.matchingSets(contains, contained).size();
		
helper def : overlaps (leftSet : OclAny, rightSet : OclAny) : Boolean =
	if leftSet.asSequence().first().length() > rightSet.asSequence().first().length() then
		thisModule.fullOverlaping(leftSet, rightSet)
	else
		thisModule.fullOverlaping(rightSet, leftSet)
	endif;	

helper def : overlappingset (lclass:OclAny, rclass:OclAny, lSF:OclAny, rSF:OclAny) : Boolean =
	let ls : OclAny = thisModule.mapLeftSet.get(lclass.key(lSF)) in
	let rs : OclAny = thisModule.mapRightSet.get(rclass.key(rSF)) in
	thisModule.overlaps(ls, rs);

helper context Metametamodel!EStructuralFeature def: sets(class:Metametamodel!EClass, mName : String) : OclAny =
	class.allInstancesFrom(mName)
	->collect(e |
		e.refGetValue(self.name)
	)->reject(e |
		 e.oclIsUndefined() or
		 	e.equals('')
	)->asSet();
		
helper context Metametamodel!EClass def : key (SF : Metametamodel!EStructuralFeature) : String =
	self.name + '_' + SF.name;

helper context Metametamodel!EStructuralFeature def : isVerificable : Boolean =	
	Set {'String', 'EString'}->includes(self.eType.name);

helper def : mapSet (mmName : String, mName : String) : Map (String, OclAny) =
	Metametamodel!EClass.allInstancesFrom(mmName)
		->reject(e | e."abstract")
		->iterate(class; map1:Map(String, OclAny) = Map{} |		
			class.eAllStructuralFeatures
			->select(e | e.isVerificable)
			->iterate(sf; map2:Map(String, OclAny)=map1 |
				let set : OclAny = sf.sets(class, mName) in
					if set.notEmpty() then
						map2.including(class.key(sf), set)
					else
						map2
					endif
			)
		);

helper def : mapLeftSet : Map (String, OclAny) =
	thisModule.mapSet('m1', 'm1model');

helper def : mapRightSet : Map (String, OclAny) =
	thisModule.mapSet('m2', 'm2model');




rule EqualClass {
	from
		l : Metametamodel!EClass in m1,
		r : Metametamodel!EClass in m2 (
			not l."abstract" and
			not r."abstract"			
		)
	to
		t : EqualMM!EqualClass (
			model <- thisModule.uniqueEqualModel,
			name <- l.name.leftName_rightName(r.name),
			child <- 	l.eAllStructuralFeatures
						->iterate(lSF; child : Sequence(OclAny) = Sequence{} |
							r.eAllStructuralFeatures
							->iterate(rSF; child2 : Sequence(OclAny) = child |
								if  not thisModule.mapLeftSet.get(l.key(lSF)).oclIsUndefined() and
									not thisModule.mapRightSet.get(r.key(rSF)).oclIsUndefined() then
									
										child2.append(thisModule.EqualStructuralFeature(l, r, lSF, rSF))
									
								else
									child2
								endif
							)
						),
			left <- leftE,			
			right <- rightE
			),
			
			
			
			leftE : EqualMM!LeftElement (
				name <- l.name,
				element <- leftERef
			),
			leftERef : EqualMM!ElementRef (
				name <- l.name,
				ref <- l.__xmiID__,
				modelRef <- thisModule.uniqueEqualModel.leftM
			),
			
			rightE : EqualMM!RightElement (
				name <- r.name,
				element <- rightERef
			),
			rightERef : EqualMM!ElementRef (
				name <- r.name,
				ref <- r.__xmiID__,
				modelRef <- thisModule.uniqueEqualModel.rightM
			)	
						
		
}

lazy abstract rule EqualStructuralFeature {
	from 
		lclass : Metametamodel!EClass,
		rclass : Metametamodel!EClass,
		lSF : Metametamodel!EStructuralFeature,
		rSF : Metametamodel!EStructuralFeature	
	to
		t : EqualMM!EqualStructuralFeature (
			name <- lSF.name.leftName_rightName(rSF.name),
			left <- leftE,
			right <- rightE
		),			
			leftE : EqualMM!LeftElement (
				name <- lSF.name,
				element <- leftERef
			),
			leftERef : EqualMM!ElementRef (
				name <- lSF.name,
				ref <- lSF.__xmiID__,
				modelRef <- thisModule.uniqueEqualModel.leftM
			),
			
			rightE : EqualMM!RightElement (
				name <- rSF.name,
				element <- rightERef
			),
			rightERef : EqualMM!ElementRef (
				name <- rSF.name,
				ref <- rSF.__xmiID__,
				modelRef <- thisModule.uniqueEqualModel.rightM
			)	
}



lazy rule Equalset extends EqualStructuralFeature {
	from
		lclass : Metametamodel!EClass,
		rclass : Metametamodel!EClass,
		lSF : Metametamodel!EStructuralFeature,
		rSF : Metametamodel!EStructuralFeature(
			 
			thisModule.equalset(lclass, rclass, lSF, rSF)
			
		)
	to
		t : EqualMM!EqualSet
}

lazy rule Superset extends EqualStructuralFeature {
	from
		lclass : Metametamodel!EClass,
		rclass : Metametamodel!EClass,
		lSF : Metametamodel!EStructuralFeature,
		rSF : Metametamodel!EStructuralFeature(
			thisModule.superset(lclass, rclass, lSF, rSF)
		)		
	to
		t : EqualMM!SuperSet
}

lazy rule Subset extends EqualStructuralFeature {
	from
		lclass : Metametamodel!EClass,
		rclass : Metametamodel!EClass,
		lSF : Metametamodel!EStructuralFeature,
		rSF : Metametamodel!EStructuralFeature(
			thisModule.subset(lclass, rclass, lSF, rSF)
		)
	to
		t : EqualMM!SubSet
}

lazy rule Overlaps extends EqualStructuralFeature {
	from
		lclass : Metametamodel!EClass,
		rclass : Metametamodel!EClass,
		lSF : Metametamodel!EStructuralFeature,
		rSF : Metametamodel!EStructuralFeature(
			thisModule.overlappingset(lclass, rclass, lSF, rSF)
		)
	to
		t : EqualMM!OverlappingSet
}

lazy rule Disjoint extends EqualStructuralFeature {
	from
		lclass : Metametamodel!EClass,
		rclass : Metametamodel!EClass,
		lSF : Metametamodel!EStructuralFeature,
		rSF : Metametamodel!EStructuralFeature
	to
		t : EqualMM!DisjointSet	
}


lazy rule leftElement {
	from
		mmw : EqualMM!LeftElement
	to
		out : EqualMM!LeftElement (
			name <- mmw.name,
			element <- mmw.element
		)
}

lazy rule rightElement {
	from
		mmw : EqualMM!RightElement
	to
		out : EqualMM!RightElement (
			name <- mmw.name,
			element <- mmw.element
		)
}

rule ElementRefs {
	from
		mmw : EqualMM!ElementRef 		
	to
		out : EqualMM!ElementRef (
			name <- mmw.name,
			ref <- mmw.ref,
			modelRef <- mmw.modelRef			
		)
}

rule matchmodel {
	from
		mmw: EqualMM!MatchModel 
	to
		model : EqualMM!MatchModel (
			name <- mmw.name,
			leftM <- mmw.leftM,
			rightM <- mmw.rightM
		)
}

rule modelref {
	from
		mmw : EqualMM!ModelRef
	to
		out : EqualMM!ModelRef (
			name <- mmw.name,
			ref <- mmw.ref
		)
}
